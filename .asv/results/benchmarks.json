{
    "run_stardis.BenchmarkStardis.time_calc_alpha_file": {
        "code": "class BenchmarkStardis:\n    def time_calc_alpha_file(self):\n        calc_alpha_file(\n            self.stellar_plasma,\n            self.stellar_model,\n            self.stellar_radiation_field.frequencies,\n            self.config.opacity.file,\n        )\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6550, 6600, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.model.fname), gzipped=config.model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.model.final_atomic_number\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.atomic_mass_fraction.columns.tolist()\n                        ),\n                        config.model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config",
        "min_run_count": 2,
        "name": "run_stardis.BenchmarkStardis.time_calc_alpha_file",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 1800,
        "type": "time",
        "unit": "seconds",
        "version": "d117b9a83688319dec4becb6832778bbe1b8846410b98ad61e230859374076fa",
        "warmup_time": -1
    },
    "run_stardis.BenchmarkStardis.time_calc_alpha_line_at_nu": {
        "code": "class BenchmarkStardis:\n    def time_calc_alpha_line_at_nu(self):\n        calc_alpha_line_at_nu(\n            self.stellar_plasma,\n            self.stellar_model,\n            self.stellar_radiation_field.frequencies,\n            self.config.opacity.line,\n        )\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6550, 6600, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.model.fname), gzipped=config.model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.model.final_atomic_number\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.atomic_mass_fraction.columns.tolist()\n                        ),\n                        config.model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config",
        "min_run_count": 2,
        "name": "run_stardis.BenchmarkStardis.time_calc_alpha_line_at_nu",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 1800,
        "type": "time",
        "unit": "seconds",
        "version": "988930f57937df646ba2eb902509b7f4c63bf992b5ac8660aab1de417e8666a2",
        "warmup_time": -1
    },
    "run_stardis.BenchmarkStardis.time_create_plasma": {
        "code": "class BenchmarkStardis:\n    def time_create_plasma(self):\n        create_stellar_plasma(self.stellar_model, self.adata, self.config)\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6550, 6600, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.model.fname), gzipped=config.model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.model.final_atomic_number\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.atomic_mass_fraction.columns.tolist()\n                        ),\n                        config.model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config",
        "min_run_count": 2,
        "name": "run_stardis.BenchmarkStardis.time_create_plasma",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 1800,
        "type": "time",
        "unit": "seconds",
        "version": "88bcdaaba9144d7dde9b1ce236bee56a7c7111095509511cb52e1747249dbf9e",
        "warmup_time": -1
    },
    "run_stardis.BenchmarkStardis.time_raytrace": {
        "code": "class BenchmarkStardis:\n    def time_raytrace(self):\n        raytrace(\n            self.stellar_model,\n            self.stellar_radiation_field,\n            no_of_thetas=self.config.no_of_thetas,\n        )\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6550, 6600, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.model.fname), gzipped=config.model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.model.final_atomic_number\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.atomic_mass_fraction.columns.tolist()\n                        ),\n                        config.model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config",
        "min_run_count": 2,
        "name": "run_stardis.BenchmarkStardis.time_raytrace",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 1800,
        "type": "time",
        "unit": "seconds",
        "version": "82a08dedce77f9278fbe35f238c642ac054bafc6c0d952a5da23f15a320df6c2",
        "warmup_time": -1
    },
    "run_stardis.BenchmarkStardis.time_run_stardis": {
        "code": "class BenchmarkStardis:\n    def time_run_stardis(self):\n        run_stardis(CONFIG_PATH, self.tracing_lambdas)\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6550, 6600, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.model.fname), gzipped=config.model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.model.final_atomic_number\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.atomic_mass_fraction.columns.tolist()\n                        ),\n                        config.model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config",
        "min_run_count": 2,
        "name": "run_stardis.BenchmarkStardis.time_run_stardis",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 1800,
        "type": "time",
        "unit": "seconds",
        "version": "6d28414daa360bb5a0f26b81965476d85ac5029aca04999c4bdf10e33731cd1e",
        "warmup_time": -1
    },
    "version": 2
}