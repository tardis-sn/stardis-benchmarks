{"project": "stardis", "project_url": "https://tardis-sn.github.io/tardis", "show_commit_url": "https://github.com/tardis-sn/stardis/commit", "hash_length": 8, "revision_to_hash": {"189": "2e61ddb4190adc63ff45d9b4bcfecb34b2ef5e7a", "191": "ceb23e500e608b603fdf877a5c273f136b8a63e5", "193": "68b5e521df86ac33faf42f1611fe31d1f285650e", "195": "f79821a9faf63feb93a8d476108b0e63a11baeb0", "197": "eba2b6dc4c5d9fc7987b4762e277199dc123c372"}, "revision_to_date": {"189": 1705425436000, "191": 1705951587000, "193": 1706041857000, "195": 1706825084000, "197": 1706899985000}, "params": {"arch": ["x86_64"], "cpu": ["AMD EPYC 7763 64-Core Processor"], "machine": ["fv-az1543-44"], "num_cpu": ["4"], "os": ["Linux 6.2.0-1019-azure"], "ram": ["16365028"], "python": ["3.10"], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "fv-az1543-44", "num_cpu": "4", "os": "Linux 6.2.0-1019-azure", "ram": "16365028", "python": "3.10", "branch": "main"}], "benchmarks": {"run_stardis.BenchmarkStardis.time_calc_alpha": {"code": "class BenchmarkStardis:\n    def time_calc_alpha(self):\n        calc_alpha_line_at_nu(\n            self.stellar_plasma,\n            self.stellar_model,\n            self.stellar_radiation_field.frequencies,\n            self.config.opacity.line,\n        )\n\n    def setup(self):\n        base_dir = os.path.abspath(os.path.dirname(__file__))\n        schema = os.path.join(base_dir, \"config_schema.yml\")\n        config_file = os.path.join(base_dir, \"benchmark_config.yml\")\n        tracing_lambdas = np.arange(6550, 6575, 0.05) * u.Angstrom\n        os.chdir(base_dir)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n    \n        config_dict = validate_yaml(config_file, schemapath=schema)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        if config.model.type == \"marcs\":\n            raw_marcs_model = read_marcs_model(\n                config.model.fname, gzipped=config.model.gzipped\n            )\n            stellar_model = raw_marcs_model.to_stellar_model(\n                adata, final_atomic_number=config.model.final_atomic_number\n            )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.atomic_mass_fraction.columns.tolist()\n                        ),\n                        config.model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            )\n        )\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config\n        self.config_file = config_file", "min_run_count": 2, "name": "run_stardis.BenchmarkStardis.time_calc_alpha", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1800, "type": "time", "unit": "seconds", "version": "9c3ba64fb5a29a5204fc523978214a9fcd0e000d77abdf34c2db6ab0c25b38d8", "warmup_time": -1}, "run_stardis.BenchmarkStardis.time_raytrace": {"code": "class BenchmarkStardis:\n    def time_raytrace(self):\n        raytrace(\n            self.stellar_model,\n            self.stellar_radiation_field,\n            no_of_thetas=self.config.no_of_thetas,\n        )\n\n    def setup(self):\n        base_dir = os.path.abspath(os.path.dirname(__file__))\n        schema = os.path.join(base_dir, \"config_schema.yml\")\n        config_file = os.path.join(base_dir, \"benchmark_config.yml\")\n        tracing_lambdas = np.arange(6550, 6575, 0.05) * u.Angstrom\n        os.chdir(base_dir)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n    \n        config_dict = validate_yaml(config_file, schemapath=schema)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        if config.model.type == \"marcs\":\n            raw_marcs_model = read_marcs_model(\n                config.model.fname, gzipped=config.model.gzipped\n            )\n            stellar_model = raw_marcs_model.to_stellar_model(\n                adata, final_atomic_number=config.model.final_atomic_number\n            )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.atomic_mass_fraction.columns.tolist()\n                        ),\n                        config.model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            )\n        )\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config\n        self.config_file = config_file", "min_run_count": 2, "name": "run_stardis.BenchmarkStardis.time_raytrace", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1800, "type": "time", "unit": "seconds", "version": "92e20e76a5698a21056ace5791e99638cb2982955aa88b049495cd41cf580f98", "warmup_time": -1}, "run_stardis.BenchmarkStardis.time_run_stardis": {"code": "class BenchmarkStardis:\n    def time_run_stardis(self):\n        run_stardis(self.config_file, self.tracing_lambdas)\n\n    def setup(self):\n        base_dir = os.path.abspath(os.path.dirname(__file__))\n        schema = os.path.join(base_dir, \"config_schema.yml\")\n        config_file = os.path.join(base_dir, \"benchmark_config.yml\")\n        tracing_lambdas = np.arange(6550, 6575, 0.05) * u.Angstrom\n        os.chdir(base_dir)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n    \n        config_dict = validate_yaml(config_file, schemapath=schema)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        if config.model.type == \"marcs\":\n            raw_marcs_model = read_marcs_model(\n                config.model.fname, gzipped=config.model.gzipped\n            )\n            stellar_model = raw_marcs_model.to_stellar_model(\n                adata, final_atomic_number=config.model.final_atomic_number\n            )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.atomic_mass_fraction.columns.tolist()\n                        ),\n                        config.model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            )\n        )\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config\n        self.config_file = config_file", "min_run_count": 2, "name": "run_stardis.BenchmarkStardis.time_run_stardis", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1800, "type": "time", "unit": "seconds", "version": "2d2ee0e8d557f1f6a90c571689a1f87d881a33bbcc087f66035ccc079b98dc48", "warmup_time": -1}}, "machines": {"fv-az1543-44": {"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "fv-az1543-44", "num_cpu": "4", "os": "Linux 6.2.0-1019-azure", "ram": "16365028", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}