{"project": "stardis", "project_url": "https://tardis-sn.github.io/tardis", "show_commit_url": "https://github.com/tardis-sn/stardis/commit", "hash_length": 8, "revision_to_hash": {"299": "cff560e3758f7144748135b6ac7a717d25f2edc5", "303": "267aa64498e056db46813feb0b76917b51354cd2", "324": "05317df6525c9c67f13c7157b8a7b7fa4435b774", "351": "7fda8bcbb9162d2348c93fd3f63a3943d8521289", "353": "f4eca3314ccfb752a6e4ef5bb82129234a630b63", "355": "7118b138571bdb647105862700ae0f0fa6a9b8a7", "357": "8809379f73622b3222455ecd491818a4c2f3a756", "364": "0adf265f8bf5a3b1739f112e81c4d1b139fcde83"}, "revision_to_date": {"299": 1736795479000, "303": 1740412579000, "324": 1745345436000, "351": 1748354293000, "353": 1749243092000, "355": 1750688572000, "357": 1750951763000, "364": 1757342887000}, "params": {"arch": ["x86_64"], "cpu": ["AMD EPYC 7763 64-Core Processor"], "machine": ["pkrvm7jw40e0xgp"], "num_cpu": ["4"], "os": ["Linux 6.11.0-1018-azure"], "ram": ["16379472"], "python": ["3.12"], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "pkrvm7jw40e0xgp", "num_cpu": "4", "os": "Linux 6.11.0-1018-azure", "ram": "16379472", "python": "3.12", "branch": "main"}], "benchmarks": {"run_stardis.Sim100AA.time_calc_alpha_file": {"code": "class Sim100AA:\n    def time_calc_alpha_file(self):\n        calc_alpha_file(\n            self.stellar_plasma,\n            self.stellar_model,\n            self.stellar_radiation_field.frequencies,\n            list(self.config.opacity.file.keys())[0],\n            list(self.config.opacity.file.values())[0],\n        )\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6500, 6600, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.input_model.fname), gzipped=config.input_model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.input_model.final_atomic_number, composition_source=config.input_model.composition_source\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.elemental_mass_fraction.columns.tolist()\n                        ),\n                        config.input_model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model, num_of_thetas=config.no_of_thetas\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config", "min_run_count": 2, "name": "run_stardis.Sim100AA.time_calc_alpha_file", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1800, "type": "time", "unit": "seconds", "version": "191c053ea6dcbf13bc462eff0617241a3842141f00a2ced70140a887815c7ea8", "warmup_time": -1}, "run_stardis.Sim100AA.time_calc_alpha_line_at_nu": {"code": "class Sim100AA:\n    def time_calc_alpha_line_at_nu(self):\n        calc_alpha_line_at_nu(\n            self.stellar_plasma,\n            self.stellar_model,\n            self.stellar_radiation_field.frequencies,\n            self.config.opacity.line,\n        )\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6500, 6600, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.input_model.fname), gzipped=config.input_model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.input_model.final_atomic_number, composition_source=config.input_model.composition_source\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.elemental_mass_fraction.columns.tolist()\n                        ),\n                        config.input_model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model, num_of_thetas=config.no_of_thetas\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config", "min_run_count": 2, "name": "run_stardis.Sim100AA.time_calc_alpha_line_at_nu", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1800, "type": "time", "unit": "seconds", "version": "a5d2a72cab0747bd33f63b20ced79ce2970e9651e9421e598d4918557312634c", "warmup_time": -1}, "run_stardis.Sim100AA.time_raytrace": {"code": "class Sim100AA:\n    def time_raytrace(self):\n        raytrace(\n            self.stellar_model,\n            self.stellar_radiation_field,\n        )\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6500, 6600, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.input_model.fname), gzipped=config.input_model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.input_model.final_atomic_number, composition_source=config.input_model.composition_source\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.elemental_mass_fraction.columns.tolist()\n                        ),\n                        config.input_model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model, num_of_thetas=config.no_of_thetas\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config", "min_run_count": 2, "name": "run_stardis.Sim100AA.time_raytrace", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1800, "type": "time", "unit": "seconds", "version": "4d34b35e6202fbac7e16e3095755c5740292e36b7ae7fa3d999e3b12cabfbbc5", "warmup_time": -1}, "run_stardis.Sim100AA.time_run_stardis": {"code": "class Sim100AA:\n    def time_run_stardis(self):\n        run_stardis(CONFIG_PATH, self.tracing_lambdas)\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6500, 6600, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.input_model.fname), gzipped=config.input_model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.input_model.final_atomic_number, composition_source=config.input_model.composition_source\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.elemental_mass_fraction.columns.tolist()\n                        ),\n                        config.input_model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model, num_of_thetas=config.no_of_thetas\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config", "min_run_count": 2, "name": "run_stardis.Sim100AA.time_run_stardis", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1800, "type": "time", "unit": "seconds", "version": "cb18ab69d1ef3abdc533842870579a2a8c318ffb381bf4453b67b5902586d0ed", "warmup_time": -1}, "run_stardis.Sim10AA.time_calc_alpha_file": {"code": "class Sim10AA:\n    def time_calc_alpha_file(self):\n        calc_alpha_file(\n            self.stellar_plasma,\n            self.stellar_model,\n            self.stellar_radiation_field.frequencies,\n            list(self.config.opacity.file.keys())[0],\n            list(self.config.opacity.file.values())[0],\n        )\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6560, 6570, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.input_model.fname), gzipped=config.input_model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.input_model.final_atomic_number, composition_source=config.input_model.composition_source\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.elemental_mass_fraction.columns.tolist()\n                        ),\n                        config.input_model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model, num_of_thetas=config.no_of_thetas\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config", "min_run_count": 2, "name": "run_stardis.Sim10AA.time_calc_alpha_file", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1800, "type": "time", "unit": "seconds", "version": "08b28a4c3f78ffaabd52d08a652754937f3bc4b25bd281009c4429c7dbe05e5b", "warmup_time": -1}, "run_stardis.Sim10AA.time_calc_alpha_line_at_nu": {"code": "class Sim10AA:\n    def time_calc_alpha_line_at_nu(self):\n        calc_alpha_line_at_nu(\n            self.stellar_plasma,\n            self.stellar_model,\n            self.stellar_radiation_field.frequencies,\n            self.config.opacity.line,\n        )\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6560, 6570, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.input_model.fname), gzipped=config.input_model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.input_model.final_atomic_number, composition_source=config.input_model.composition_source\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.elemental_mass_fraction.columns.tolist()\n                        ),\n                        config.input_model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model, num_of_thetas=config.no_of_thetas\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config", "min_run_count": 2, "name": "run_stardis.Sim10AA.time_calc_alpha_line_at_nu", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1800, "type": "time", "unit": "seconds", "version": "36a970599613de8f1c6fef00539283f2400f25c13ad190cbf5e5066f3982dadc", "warmup_time": -1}, "run_stardis.Sim10AA.time_create_plasma": {"code": "class Sim10AA:\n    def time_create_plasma(self):\n        create_stellar_plasma(self.stellar_model, self.adata, self.config)\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6560, 6570, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.input_model.fname), gzipped=config.input_model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.input_model.final_atomic_number, composition_source=config.input_model.composition_source\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.elemental_mass_fraction.columns.tolist()\n                        ),\n                        config.input_model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model, num_of_thetas=config.no_of_thetas\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config", "min_run_count": 2, "name": "run_stardis.Sim10AA.time_create_plasma", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1800, "type": "time", "unit": "seconds", "version": "cb9d7ff1147208aeac7cdb757fc0e0d160a291a791c03a8ceb06b352fec29110", "warmup_time": -1}, "run_stardis.Sim10AA.time_raytrace": {"code": "class Sim10AA:\n    def time_raytrace(self):\n        raytrace(\n            self.stellar_model,\n            self.stellar_radiation_field,\n        )\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6560, 6570, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.input_model.fname), gzipped=config.input_model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.input_model.final_atomic_number, composition_source=config.input_model.composition_source\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.elemental_mass_fraction.columns.tolist()\n                        ),\n                        config.input_model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model, num_of_thetas=config.no_of_thetas\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config", "min_run_count": 2, "name": "run_stardis.Sim10AA.time_raytrace", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1800, "type": "time", "unit": "seconds", "version": "2ff3c197363937ff7ccb6775fcc2cad19f5c37db00107750c2d700ee04819aec", "warmup_time": -1}, "run_stardis.Sim10AA.time_run_stardis": {"code": "class Sim10AA:\n    def time_run_stardis(self):\n        run_stardis(CONFIG_PATH, self.tracing_lambdas)\n\n    def setup(self):\n    \n        tracing_lambdas = np.arange(6560, 6570, 0.01) * u.Angstrom\n        os.chdir(BASE_DIR)\n    \n        tracing_nus = tracing_lambdas.to(u.Hz, u.spectral())\n        config_dict = validate_yaml(CONFIG_PATH, schemapath=SCHEMA_PATH)\n        config = Configuration(config_dict)\n    \n        adata = AtomData.from_hdf(config.atom_data)\n    \n        raw_marcs_model = read_marcs_model(\n            Path(config.input_model.fname), gzipped=config.input_model.gzipped\n        )\n        stellar_model = raw_marcs_model.to_stellar_model(\n            adata, final_atomic_number=config.input_model.final_atomic_number, composition_source=config.input_model.composition_source\n        )\n    \n        adata.prepare_atom_data(\n            np.arange(\n                1,\n                np.min(\n                    [\n                        len(\n                            stellar_model.composition.elemental_mass_fraction.columns.tolist()\n                        ),\n                        config.input_model.final_atomic_number,\n                    ]\n                )\n                + 1,\n            ),\n            line_interaction_type=\"macroatom\",\n            nlte_species=[],\n            continuum_interaction_species=[],\n        )\n        self.adata = adata\n    \n        stellar_plasma = create_stellar_plasma(stellar_model, adata, config)\n    \n        stellar_radiation_field = RadiationField(\n            tracing_nus, blackbody_flux_at_nu, stellar_model, num_of_thetas=config.no_of_thetas\n        )\n    \n        calc_alphas(\n            stellar_plasma=stellar_plasma,\n            stellar_model=stellar_model,\n            stellar_radiation_field=stellar_radiation_field,\n            opacity_config=config.opacity,\n        )\n    \n        self.tracing_lambdas = tracing_lambdas\n    \n        self.stellar_model = stellar_model\n        self.stellar_plasma = stellar_plasma\n        self.stellar_radiation_field = stellar_radiation_field\n        self.config = config", "min_run_count": 2, "name": "run_stardis.Sim10AA.time_run_stardis", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1800, "type": "time", "unit": "seconds", "version": "117b5c3b4db2f341bd5c20caba47911743a10742a9058780b53fd2c1d70daccc", "warmup_time": -1}}, "machines": {"pkrvm7jw40e0xgp": {"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "pkrvm7jw40e0xgp", "num_cpu": "4", "os": "Linux 6.11.0-1018-azure", "ram": "16379472", "version": 1}}, "tags": {"release-2025.08.19": 357, "v2025.01.13": 299, "v2025.02.24": 303, "v2025.04.23": 324, "v2025.06.16": 353, "v2025.06.26": 357}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}